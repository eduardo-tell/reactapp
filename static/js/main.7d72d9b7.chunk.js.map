{"version":3,"sources":["components/Header/index.js","serviceWorker.js","index.js","pages/home/index.js"],"names":["alterMenu","document","querySelectorAll","classList","toggle","window","onscroll","header","querySelector","scrollTop","add","remove","addEventListener","Header","Component","Boolean","location","hostname","match","ReactDOM","render","className","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAOA,SAASA,IACLC,SAASC,iBAAiB,eAAe,GAAGC,UAAUC,OAAO,QALjEC,OAAOC,SAQP,WACI,IAAMC,EAASN,SAASO,cAAc,UAClCP,SAASC,iBAAiB,QAAQ,GAAGO,WAAa,EAClDF,EAAOJ,UAAUO,IAAI,UAErBH,EAAOJ,UAAUQ,OAAO,WAZhCV,SAASC,iBAAiB,cAAc,GAAGU,iBAAiB,QAASZ,GAAW,GAChFC,SAASC,iBAAiB,sBAAsB,GAAGU,iBAAiB,QAASZ,GAAW,G,IAgBnEa,E,iLAEb,OACI,yC,GAHwBC,aCThBC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,mBCHD,WACX,OACI,oCACI,kBAAC,EAAD,MACA,6BAASC,UAAU,iBACf,iDDFA,MAAUpB,SAASqB,eAAe,SD6H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7d72d9b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './styles.scss';\r\n\r\nwindow.onscroll = scroll;\r\ndocument.querySelectorAll('.open-menu')[0].addEventListener('click', alterMenu, true)\r\ndocument.querySelectorAll('.menu-itens__close')[0].addEventListener('click', alterMenu, true)\r\n\r\nfunction alterMenu(){  \r\n    document.querySelectorAll('.menu-itens')[0].classList.toggle('open')\r\n}\r\n\r\nfunction scroll(){    \r\n    const header = document.querySelector('header')\r\n    if (document.querySelectorAll('html')[0].scrollTop >= 1) {\r\n        header.classList.add('scroll')\r\n    } else {\r\n        header.classList.remove('scroll')\r\n    }\r\n};\r\n\r\n\r\nexport default class Header extends Component {\r\n    render(){\r\n        return (\r\n            <>\r\n            \r\n            </>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from './pages/home';\nimport * as serviceWorker from './serviceWorker';\nimport './css/main.scss';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react'\r\nimport Header from '../../components/Header';\r\n\r\nexport default function Home() {\r\n    return (\r\n        <>\r\n            <Header />\r\n            <section className=\"apresentation\">\r\n                <h1> Hello World </h1>\r\n            </section>\r\n        </>\r\n    );\r\n    \r\n}\r\n"],"sourceRoot":""}